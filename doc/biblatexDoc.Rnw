\documentclass[article]{jss}

%\usepackage[top=2.5cm,bottom=2.5cm,left=2cm,right=2cm]{geometry}  % for page layout % the strange top margin is needed to use lineno for line numbering
%\usepackage{parskip}   % nicer parskip and parindent
%\setlength{\parindent}{1.5em}
%\addtolength{\textheight}{1.3in}
\usepackage{graphicx}   % enhanced graphics support
%\usepackage{epstopdf}  % converts eps to pdf
%\epstopdfsetup{outdir=images/}
%\usepackage{verbatim} % reimplements verbatim, adds comment environment
%\usepackage{rotating} % for rotation of floats
%\usepackage{xcolor}      % colour extensions
%\usepackage{etoolbox}   % used by other packages including html. loading before html to avoid warning
%\usepackage{transparant} % for adding transperency to text. potential problems with packages that use \pdfpageresources
%%#%%%%%%%%%%%!!!!!!!!!!!!!!!!!!!!!!!!%%%%%%%%%%%%%%%%\usepackage{pdfsync}  % never use this. really profanity's up spacing when used with some other packages such as lineno and multicol

%\usepackage[noae]{Sweave} % needed so that font change to iwona not ignored

%Encoding
\usepackage[english]{babel} % for multilingual support
\usepackage[T1]{fontenc}    % font encoding
\usepackage[utf8]{inputenc} % input encoding. some others complain of frequent conflicts. i have not had many issues
\usepackage{lmodern} % latin modern fonts
\usepackage{microtype} % conserves space, and makes text prettier by making micro adjustments to text
\usepackage{upquote}
%\usepackage[condensed]{iwona}
%\usepackage[condensed,math]{anttor}
%\usepackage{html} % for urls with line breaks. OLD
%\usepackage[hyphens]{url} % for verbatim urls with line breaks. just use html package. automatically loaded with biblatex
%\usepackage[anythingbreaks]{breakurl}
% http://tex.stackexchange.com/questions/39285/whats-the-advantage-of-using-csquotes-over-using-an-editors-auto-replacement-f

%\usepackage{array}
\usepackage{amsmath} % needed for math
\usepackage{amssymb} % for bold math. see here: http://tex.stackexchange.com/a/99286
%\usepackage{amsbsy} % alternative for bold math
% \usepackage{bbm}   % another alternative for bold math
%\usepackage{ulem}   % for various types of underlining. Beware: for strikethrough text \sout{} changes definition of \emph to underline!!!
%\usepackage{amscd}  % for commutative diagrams
%%%%%\usepackage{theorem} % enhances theorem environment. i hope to one day need this
%\usepackage{amsthm} % alternative to theorem, recommended by author of theorem package. see also ntheoremq
%\usepackage{latexsym}
%%#%%%%%%%%%%%%%%\usepackage[noend]{algorithmic}
%%#%%%%%%%%%%%%%%%%\usepackage{algcompatible} % for pseudocode/algorithms.  Lots of options, see here: http://www.tex.ac.uk/cgi-bin/texfaq2html?label=algorithms
%%#%%%%%%%%%%%%%%%%%\usepackage{algorithm}     % jimmy prefers algorithm2e. algorithm conflicts with hyperref!!!
%\usepackage{algorithmicx}  % loaded by algpseudocode
\usepackage{algorithm}  % needed for algpseudocode
\usepackage{algpseudocode}

%\usepackage[switch,running,right,mathlines]{lineno}  % add line numbers to drafts
% \usepackage{xparse} % for defining more complex macros (more than one optional argument, etc.)
%\usepackage[round]{natbib} % biblatex is far superior, though sadly not supported by many journals
%\usepackage{csquotes} % allows for multiple, language-dependent definitions for quotes. csquotes recommended for use with biblatex
%\usepackage[style=authoryear,backend=biber,firstinits=false,maxcitenames=2,maxbibnames=99,urldate=iso8601,uniquename=false,uniquelist,url=true]{biblatex}

%\bibliography{<database>} % or
%\addbibresource{vbFGAMbib.bib}
%\usepackage{epsf} % converts eps figs to pdf so can pdftexify with eps figs
%\usepackage{multirow} % for table entries spanning multiple rows
%\usepackage{setspace} % for double-spacing documents

\usepackage[matstyle=bbold]{MattsMacros}
%\usepackage{hyperref}  % Useful, but so many conflicts!!!
%\usepackage{Biomet-lineno}

%\usepackage{coffee4}
%\renewcommand{\thesection}{A}%\arabic{section}
%\addtolength{\parskip}{-.25in}
%\setlength{\parindent}{1.5em}
%\includeonlyframes{current}

% A command for adding comments to a working document.  Using renewcommand removes comments
%\newcommand{\comments}[1]{ \emph{{\color{red}#1}} }
%\newcommand{\comments}[1]{#1}
%\renewcommand{\comments}[1]{#1}
% or use: \usepackage{comment}

% wrap messages
\usepackage{listings}
\lstset{%
basicstyle=\small\ttfamily\itshape\color{cyan},
columns=fullflexible,
breaklines=true,
inputencoding=utf8, 
extendedchars=\true,
postbreak=\#\#\space,
breakautoindent=false,
breakindent=0pt,
inputencoding=utf8,
literate=
  {á}{{\'a}}1 {é}{{\'e}}1 {í}{{\'i}}1 {ó}{{\'o}}1 {ú}{{\'u}}1
  {Á}{{\'A}}1 {É}{{\'E}}1 {Í}{{\'I}}1 {Ó}{{\'O}}1 {Ú}{{\'U}}1
  {à}{{\`a}}1 {è}{{\'e}}1 {ì}{{\`i}}1 {ò}{{\`o}}1 {ò}{{\`u}}1
  {À}{{\`A}}1 {È}{{\'E}}1 {Ì}{{\`I}}1 {Ò}{{\`O}}1 {Ò}{{\`U}}1
  {ä}{{\"a}}1 {ë}{{\"e}}1 {ï}{{\"i}}1 {ö}{{\"o}}1 {ü}{{\"u}}1
  {Ä}{{\"A}}1 {Ë}{{\"E}}1 {Ï}{{\"I}}1 {Ö}{{\"O}}1 {Ü}{{\"U}}1
  {â}{{\^a}}1 {ê}{{\^e}}1 {î}{{\^i}}1 {ô}{{\^o}}1 {û}{{\^u}}1
  {Â}{{\^A}}1 {Ê}{{\^E}}1 {Î}{{\^I}}1 {Ô}{{\^O}}1 {Û}{{\^U}}1
  {œ}{{\oe}}1 {Œ}{{\OE}}1 {æ}{{\ae}}1 {Æ}{{\AE}}1 {ß}{{\ss}}1
  {ç}{{\c c}}1 {Ç}{{\c C}}1 {ø}{{\o}}1 {å}{{\r a}}1 {Å}{{\r A}}1
  {€}{{\EUR}}1 {£}{{\pounds}}1
}

\graphicspath{{./images/}}

\newcommand{\ourpkg}{\pkg{RefManageR}}
\newcommand{\bt}{\`{}}

% red text for errors in listings environment
\lstdefinestyle{error}{
  language=C,
  emptylines=1,
  breaklines=true,
  basicstyle=\ttfamily\color{red},
  moredelim=**[is][\color{red}]{@}{@},
}

\lstdefinestyle{output}{
  language=C,
  emptylines=1,
  breaklines=true,
  basicstyle=\ttfamily\color{black},
}

%\usepackage{dtklogos}
%\newcommand{\Bibtex}{B\kern-.05em%\hbox{$\m@th$\csnameS@\f@size\endcsname\fontsize\sf@size\z@\math@fontsfalse\selectfontI\kern-.025emB}\kern-.08em\-\TeX}

%http://tex.stackexchange.com/questions/37095/compatibility-of-bibtex-and-biblatex-bibliography-files
%http://tex.stackexchange.com/questions/25701/bibtex-vs-biber-and-biblatex-vs-natbib
\title{Straightforward Bibliography Managament in \R{} Using the \ourpkg{} Package}

\author{Mathew W.\ McLean\\ Texas A\&M University
\And
Raymond J.\ Carroll\\
Texas A\&M University
}
\Address{Mathew W.\ McLean\\ 
Institute for Applied Mathematics and Computational Science\\
Texas A\&M University\\
3143 TAMU\\
College Station, TX, 77843\\  
E-mail: \email{mmclean@stat.tamu.edu}\\
URL: \url{http://stat.tamu.edu/~mmclean}
}

\date{\today}

\Abstract{We introduce the \proglang{R} package \ourpkg{}, which provides tools for importing and working with bibliographic references.  It extends the \texttt{bibentry} class in \R{} in a number of useful ways, including providing \R{} with previously unavailable support for \Biblatex{}.  \Biblatex{} provides a superset of the functionality of \Bibtex, including full Unicode support, no memory limitations, additional fields and entry types, and more sophisticated sorting of references.  \ourpkg{} provides functions for citing and generating a bibliography with hyperlinks for documents prepared with RMarkdown or RHTML.  Existing .bib files can be read into \R{} and converted from \Bibtex{} to \Biblatex{} and vice versa.  References can also be imported via queries to NCBI's Entrez, \proglang{Zotero} libraries, Google Scholar, and Crossref.  Additionally, references can be created by reading PDFs stored on the user's machine with the help of Poppler.  Entries stored in the reference manager can can be easily searched by any field, by date ranges, and by various formats for name lists (author by last names, translator by full names, etc.). Entries can also be updated, combined, sorted, printed in a number of styles, and exported.  
}

\Keywords{\R{}, Biblatex, Bibtex, reference management, document generation, Unicode, \pkg{cURL}}
\Plainkeywords{R, Biblatex, Bibtex, reference management, document generation, Unicode, cURL}

\begin{document}
%\SweaveOpts{concordance=TRUE}
\maketitle
\section{Introduction}
Creating, managing, and processing references can often be a hastle.  There are a number of reasons one may want or need to work with bibliographic data in \R{}, for example for bibliometrics.  The \code{person} and \code{bibentry} classes available in the base-priority \pkg{utils} package since \R{} 2.14.0 provide very useful functionality for working with names and bibliographic information, respectively.  An introduction to these classes is available in \citet{hornik2012who}.  In this paper, we introduce the \ourpkg{} package, which uses these classes as building blocks to greatly simplify working with bibliographies in \R{}.

%Mention \pkg{bibtex}, \pkg{CITAN}, \pkg{scholar}, \pkg{tm}, ROpenSCi, \pkg{knitcitations}, \pkg{RMendeley}.

The \code{bibentry} class is designed to work with references in \Bibtex{} format \citep{bibtex}.  \ourpkg{} provides the \code{BibEntry} class which also works with \Bibtex{} references, but additionally supports \Biblatex{} formatting.  \Biblatex{} offers a huge amount of additional functionality compared to \Bibtex{}.  For the full details, one can see the 253 page user manual \citep{biblatex}.  \Biblatex{} expands the number of automatically recognized entry types and fields offered by \Bibtex{}, allowing for much more detailed bibliographic entries,  while still maintaining compatibility with \Bibtex{}.  For example, to handle an \texttt{arXiv} eprint in \Bibtex{}, one needs to use or create a special \Bibtex{} style, or perhaps use the `note' and `year' fields in unintended ways.  The below entry is used to shamelessly cite a submitted manuscript of the first author's using the \code{bibentry} function. 

<<setup, cache=FALSE, include=FALSE>>=
## opts_knit$set(self.contained = TRUE,
##              root.dir = '~/biblatex/code')
## opts_chunk$set(concordance = TRUE)
library(knitr)
# library(lubridate)
# lapply(list.files(pattern='.R$', full=TRUE), source, echo = FALSE, verbose = FALSE)
# lapply(list.files(path = "./TEMP-ROXY-DONE/", pattern='.R$', full=TRUE), source, echo = FALSE, verbose = FALSE)
library(RefManageR)

opts_knit$set(out.format = "latex")
# opts_chunk$set(cache=TRUE, autodep=TRUE)
knit_theme$set('fine_blue')
knit_hooks$set(message = function(x, options) {
    return(paste0('\\begin{lstlisting}\n',
      x,
    '\\end{lstlisting}'))
})
knit_hooks$set(error = function(x, options) {
    return(paste0('\\begin{lstlisting}[style=error]\n',
      x,
    '\\end{lstlisting}'))
})
@
<<bibtexexample, cache=FALSE, eval=TRUE, results='markup', tidy=FALSE>>=
bibentry("misc", key = "mclean2013bayesian", author = "McLean, M. W. and 
         Scheipl, F. and Hooker, G. and Greven, S. and Ruppert, D.",
         title = "Bayesian Functional Generalized Additive Models 
                 with Sparsely Observed Covariates", year = "Submitted", 
         note = "arXiv eprint: 1305.3585")
@
Though arXiv provides suggestions for creating \Bibtex{} entries for their papers (\url{http://arxiv.org/hypertex/bibstyles/}), there is a frustrating lack of consistency in how people choose to create \Bibtex{} entries for their arXiv papers.  In \Biblatex{}, there is greatly expanded support for electronic publications with fields for eprint, eprinttype, eprintclass, urldate, and pubstate.  One can cite the same article in \Biblatex{} without the need of a special \code{.bst} file or the note field using
 %<<bibexample, cache=FALSE, eval=FALSE, results='markup', tidy=FALSE>>=
 \begin{verbatim}
 @misc{mclean2013bayesian,
   author = {McLean, M. W. and Scheipl, F. and Hooker, G.
                 and Greven, S. and Ruppert, D.},
   title = {Bayesian Functional Generalized Additive Models 
                 with Sparsely Observed Covariates},
   urldate = {2013-10-06},
   date = {2013},
   eprinttype = {arxiv},
   eprintclass = {stat.ME},
   eprint = {1305.3585},
   pubstate = {submitted},
 }
 \end{verbatim}
 We can create this entry using the \code{BibEntry} function in \ourpkg{}
<<bibexample, cache=FALSE, eval=TRUE, results='markup', tidy=FALSE>>=
BibEntry("misc", key = "mclean2013bayesian", author = "McLean, M. W. and 
         Scheipl, F. and Hooker, G. and Greven, S. and Ruppert, D.",
         title = "Bayesian Functional Generalized Additive Models 
                 with Sparsely Observed Covariates", urldate = "2013-10-06", 
         date = "2013", eprinttype = "arxiv", eprintclass = "stat.ME", 
         eprint = "1305.3585", pubstate = "submitted")
@
In \Biblatex{} the eprint identifier will automatically become a hyperlink to the paper on \texttt{arXiv}.  Notice that the `year' field is missing, and that there is instead a field `date'.  The `year' field is still supported and could have been specified instead of date, but date allows for specifying a month and day in addition to year, and also allows for a range of dates to be specified.

The \Bibtex{} fields stored in a \code{bibentry} object can be easily accessed using the \code{\bt$\bt} operator, but there do not exist functions for conveniently conducting complicated searches.  These are provided by the \ourpkg{} package using the \code{\bt[\bt} operator.  With this operator one may search a collection of references by any field or group of fields.  \Biblatex{} fields for lists of names, such as 'author' and 'editor', can be searched by family name only, full name, or full name with initials.  Additionally, dates may be specified by ranges and are compared using the lubridate package \citep{lubridate}.  Entries may also be indexed by key, created in several different ways using functions \code{BibEntry} and \code{as.BibEntry}, and updated using the \code{\bt[<-\bt} operator.  The \code{bibentry} class provides a method for the \code{c} generic for concatenating entries, retain this feature, while also providing a \code{merge} method to remove potential duplicate entries when combine entries from various sources.

Entries may be imported into \R{} in a number of ways.  A function is provided for reading in \code{.bib} files in \Biblatex{} and \Bibtex{} format.  For machines with \code{Poppler} installed, bibliographic metadata can be read from PDFs stored on the machine to generate a citation for each PDF.  Interfaces are provided to the CrossRef, Zotero, and NCBI's Entrez APIs to search and import references from these resources.  References can also be obtained from a researcher's Google Scholar profile.

We also provide additional printing formats and several bibliography and citation styles.  All the bibliography sorting options available in \Biblatex{} are available in \ourpkg{}.  To our knowledge our package is the first of its kind to provide support for including citations and bibliographys with hyperlinks in \code{[R]HTML} and \code{[R]Markdown} documents.  Links can point from each citation to their bibliography entry and vice versa, and hyperlinks are also automatically created for values in the \Biblatex{} fields `url', `doi', and `eprint'.

The rest of the document proceeds as follows: In Section~\ref{sec_create} we show how to create bibliography entries in \R{}, import them from local files, and discuss setting package options; Section~\ref{sec_import} discusses importing references from the web; in Section~\ref{sec_print} we discuss printing, sorting, and exporting references; in Section~\ref{sec_manip} we show how to search and update \code{BibEntry} objects; Section~\ref{sec_cite} introduces using \ourpkg{} to cite references and print a bibliography of cited references; lastly, Section~\ref{sec_conc} concludes.
% One advantage of \Biblatex{} over \Bibtex{} is that it does not use \bst{} files for styling the bibliography. A \bst{} file must be written in a special-purpose language that few are familiar with.  One style is implemented in base \proglang{R}, namely the one used by the Journal of Statistical Software.  The code may be viewed in \proglang{R} by entering \code{as.list(tools:::makeJSS())} at the console.  On the other hand \Biblatex{} bibliographies, are styled entirely using \TeX{} macros.  Multilanguage support.  Better support for crossreferences.  No memory issues for large databases like with \Bibtex{}.  Sorting and encoding issues (discussed in biblatex doc section 2.4.3). Mention eTeX and url handling
% 
% Another advantage of \Biblatex{} is its support for UTF-8 encoding. ``bibtex is an 8bit engine so it processes every file in 8-bit pieces. In utf8 non-ascii chars are longer than 8 bit so they are splitted by bibtex. This means that bibtex has problems to sort references with non-ascii chars correctly. It can also happen that bibtex inserts a line break in the middle of an utf8-char and then you will get errors.''  A list of the supported encodings on your system can be viewed in \proglang{R} using \code{iconvlist()}.  By default, ReadBib will read in a .bib file using UTF-8.  UTF-8 is  
\section{Creating BibEntry Objects and Importing From Files}\label{sec_create}
\subsection{The BibEntry Function}
Similar to the \code{bibentry} function in \pkg{utils}, \ourpkg{} provides a function \code{BibEntry} for creating a \code{BibEntry} object containing a single reference, which can be combined with other references into a single \code{BibEntry} object.  An entry is specified to the \code{BibEntry} function via an argument \code{bibtype} for the entry type, an argument \code{key} for the entry key and by specifying other arguments
in \code{field = value} form.  Though the ``year'' field is still supported for backwards compatibility with \Bibtex{}, the field ``date'' is preferred and allows for a number of different formats for the date, which will be discussed later.  The field ``journaltitle'' is preferred for specifying journals, though ``journal'' remains supported.  Below we create and print an entry of type online with fields author, title, date, journaltitle, volume, and number.  The \code{print} function for \code{BibEntry} objects offers a number of features which will be discussed in detail later.  It's default settings are chosen to mimic the defaults of \Biblatex{}.  The \code{toBiblatex} function can be used to display the entry in its \code{.bib} file format.
<<BibEntry1, tidy=FALSE, highlight=TRUE, echo=-1>>=
library(tools, quietly = TRUE, warn.conflicts = FALSE, verbose = FALSE)
bib <- BibEntry(bibtype="Article", key = "barry1996", date = "1996-08", 
  title = "A Diagnostic to Assess the Fit of a Variogram to Spatial Data",
  author = "Ronald Barry", journaltitle = "Journal of Statistical Software",
                 volume = 1, number = 1)
bib
toBiblatex(bib)
@
As with \code{bibentry} objects, the operator \code{c} may be used to combine \code{BibEntry} objects.  The \code{bibentry} class supports \Bibtex{}-style crossreferencing as does the \code{Bibentry} class.  Cross references are handled specially when indexing and searching \code{BibEntry} objects and discussed in Section~\ref{searchsec}.  In a similar vain as cross-referencing, \Biblatex{} supports a entry type ``XData'' which is never printed, but may be used to store fields that are shared by several entries.  Entries can specify a field xdata containing a comma separated list of keys belonging to Xdata entries that the child inherits from.  The following example demonstrates its use for online references available on arXiv.
<<arxiv, tidy=FALSE, highlight=TRUE, cache=TRUE>>=
bib <- BibEntry(bibtype="XData", key = "statME", eprinttype = "arxiv", 
                eprintclass = "stat.ME")
bib <- c(bib, BibEntry(bibtype="XData", key = "online2013", year = "2013", 
                       urldate = "2013-12-20"))
toBiblatex(bib)
bib <- c(bib, BibEntry(bibtype="Online", key="mclean2013rlrt", 
  author = "Mathew McLean and Giles Hooker and David Ruppert",
  title = "Restricted Likelihood Ratio Tests for Scalar-on-Function Regression",
  eprint = "1310.5811", url = "http://arxiv.org/abs/1310.5811",
  xdata = "statME,online2013"))
bib <- c(bib, BibEntry(bibtype="Online", key="mclean2013bayesian", 
  author = paste("Mathew McLean and Fabian Scheipl and Giles Hooker",
                "and Sonja Greven and David Ruppert"), 
  title = paste("Bayesian Functional Generalized Additive Models", 
               "for Sparsely Observed Covariates"),
  eprint = "1305.3585", url = "http://arxiv.org/abs/1305.3585",
  xdata = "statME,online2013"))
bib
@

The cross-referencing system in \Biblatex{} and \ourpkg{} is more sophisticated than the symmetric field mapping system used in \Bibtex{}, allowing for less cluttering and duplication of fields.  In \Biblatex{}, the ``InBook'' entry type is used for a self-contained work with its own title within a book, as opposed to simply referring to an untitled part of a book as in \Bibtex{}. In the following example, involving an `InBook' entry inheriting from a `Book' entry, there is no need to create a `booktitle' field duplicating the `title' field in the parent entry to pass on to the child entry, and there is also no need to create an empty `subtitle' field in the child entry to ensure it does not incorrectly inherit the `subtitle` of the parent.  
<<CrossrefEx, tidy=FALSE, highlight=TRUE, cache=TRUE>>=
c(BibEntry("book", key = "parent", title = "The Book Title", year = 2012, 
           subtitle = "The Book Subtitle", author = "Book Author", 
           publisher = "A publisher"), BibEntry("inbook", key = "child", 
           crossref = "parent", title = "The Title of the In Book Entry", 
           author = "In Book Author"))
@

\ourpkg{} recognizes some, but not all, localization keys defined by default in \Biblatex{}.  A localization key is a special value that \Biblatex{} parses for certain fields and replaces with predefined text called the `localization string` when printing the bibliography.  In the example below we use localization keys to specify the roles of editors using the `editortype` field and refer to portions of a text using the `bookpagination` field.
 <<Book, tidy=FALSE, highlight=TRUE, cache=TRUE>>=
 BibEntry(bibtype="Collection", key = "jaffe", editor = "Phillip Jaff\u00eb", 
   title = "Regesta Pontificum Romanorum ab condita ecclesia ad annum post
   Christum natum {MCXCVIII}", date = "1885/1888",
   editora = "S. Loewenfeld and F. Kaltenbrunner and P. Ewald",
   editoratype = "redactor", totalpages = "10", bookpagination = "section")
 @

\subsection[Reading .bib Files Into R]{Reading \code{.bib} Files Into \R{}} 
\ourpkg{} provides the function \code{ReadBib} for parsing \code{.bib} files in \Biblatex{} or \Bibtex{} format and creating \code{BibEntry} objects from them.  This function is based on the \code{read.bib} function in package \pkg{bibtex} \citep{Rbibtex}, which uses code for parsing \Bibtex{} files from \citet{bibparser}.  \code{ReadBib} expands on \code{read.bib} by providing \Biblatex{} support; by having an argument/option \code{check}, which can be disabled, and checks that each entry in the file has all the fields required by that \Biblatex{} or \Bibtex{} entry type; and also has expanded handling of name list fields to ensure that complicated names are correctly converted to \code{person} objects.  This last feature is important when searching the BibEntry object later; as we will not be able to properly search by parts of a name (such as family name only) if a name has not been correctly converted to a \code{person} object.  Since it is often not necessary in \Biblatex{} to provide all "required" fields for an entry, it can be useful to be able turn of the check for required fields in \R{} when one wants to work with entries that are missing some fields.  For example, the sample \code{.bib} file that comes with the \Biblatex{} package, and is also included with \ourpkg{} for demonstration purposes has three entries that are missing required fields.  The default behaviour is to not add these entries, but this can be changed.
<<ReadBib, cache = TRUE>>=
file <- system.file("Bib", "biblatexExamples.bib", package = "RefManageR")
bib <- ReadBib(file, check = "error")
bib <- ReadBib(file, check = FALSE)
print(bib[c("cms", "jcg", "ctan")], .opts = list(check.entries = FALSE))
@

\subsection{Creating Citations From PDFs}
Using the function \code{ReadPDFs} and the freely available software Poppler, it is possible to create references from PDFs stored on a user's machine.  The user specifies a directory containing PDFs (or a single PDF file) which are then read by Poppler and converted to \code{.txt} files which are read into \R{}, parsed into citations, and output as a BibEntry object.  

The function will first search the text for a Document Object Identifier (DOI), and if one is found, the citation information will be downloaded from CrossRef using their API.  This feature will be discussed in more detail in the next section.  The function also works especially well with PDFs downloaded from \url{jstor.org} by recognizing the format of the cover page that JSTOR generates.  This allows for detailed and accurate citations to be obtained.  The function also recognizes papers downloaded from \url{http://arXiv.org} and parses the arXiv identifier in its current and pre-March 2007 format.

If there is no DOI available and the document does not have a JSTOR cover page, it is considerably more difficult to obtain an accurate citation.  The function is often able to recover the title, author, and date information.  It can parse journal title, volume, and issue information if it is present in an obvious format.  Articles with complicated formatting and missing the features discussed in the previous paragraph are not likely to be parsed correctly and the user will have to manual edit the entries, which will be covered in a later section.
With the following code, we can download Windows binaries of Poppler and download some PDFs
to test out.
<<Poppler1, cache = TRUE, warning=FALSE, message=FALSE, tidy = FALSE, eval = FALSE>>=
tmpdir <- tempdir()
tmpfile <- tempfile(".zip", tmpdir)
download.file("http://dl.dropbox.com/u/3291828/Poppler/poppler.0.22.0_win32.zip", 
              tmpfile)
unzip(tmpfile, exdir = tmpdir)
curdir <- getwd()
setwd(file.path(tmpdir, "bin", fsep = "\\"))
download.file("http://www.jstatsoft.org/v56/i11/paper", "jss.pdf", 
                mode = "wb")
download.file("http://arxiv.org/pdf/math/0703791", 
              destfile = "FIZaop.pdf", mode = "wb")
download.file("http://arxiv.org/pdf/math/0703858", 
              destfile = "PBHTaos.pdf", mode = "wb") 
download.file("http://biomet.oxfordjournals.org/content/83/4/715.full.pdf", 
  destfile = "ADVb.pdf", mode = "wb") 
download.file("http://www.jstor.org/stable/pdfplus/25645718.pdf",
              destfile = "jstor.pdf", mode = "wb")
@

<<Poppler2, cache = TRUE, tidy = FALSE, echo = -1, eval = 1:3>>=
setwd("C:/Users/Matthew/Documents/biblatex/RefManageR/doc/ReadPDFex2/bin")
bib <- ReadPDFs(".")
bib
@
We then clean up using \code{setwd(curdir)} and \code{unlink(tmpdir)}.

\subsection[Conversion of Other Object Types to Class BibEntry]{Conversion of Other Object Types to Class \code{BibEntry}}
The \code{as.BibEntry} function will convert objects of several other data types to BibEntry if they have the proper format.  Acceptable formats include a named \code{character vector} with entries for `bibtype', `key' and other fields for a single entry; a \code{list} of named \code{character vectors} for multiple entries; \code{bibentry} objects; or a \code{data.frame} with row names corresponding to `keys' and a column for `bibtype'.
<<asBibEntry, cache=TRUE, tidy = FALSE>>=
bib <- as.BibEntry(c(key = "carroll2014dietary", bibtype = "article", 
  title = "Estimating the distribution of dietary consumption patterns", 
  author = "Raymond J. Carroll", journal = "Statistical Science", 
  year = 2014, pubstate = "inpress"))
bib
@

To demonstrate the function's use further, the following example will create a \code{Bibentry} object containing entries for every installed \R{} package.  It makes use of the \code{installed.packages} and \code{citation} functions in the \pkg{utils} package.
<<asBibEntry2, cache=FALSE, tidy = FALSE, warning=FALSE, message=FALSE>>=
pkg.names <- rownames(installed.packages())
pkg.bib <- lapply(pkg.names, function(pkg){
  refs <- as.BibEntry(citation(pkg))
  names(refs) <- make.unique(rep(pkg, length(refs)))
  refs
})
@
Keys may be extracted from \code{BibEntry} objects using either the \code{names} method or the \code{\bt$\bt} operator with name argument (the value to the right of the `\$' sign) equal to `key'.  The extra step involving the \code{names<-} method for \code{BibEntry} objects assigns a unique key to each entry, as the \code{citation} function does not provide a key for each entry and may return more than one reference for a single package.  At this point, because of the use of \code{lapply}, \code{pkg.bib} is a \code{list} of \code{BibEntry} objects, instead of a single \code{BibEntry} object.  One way to rectify this is using the internal function \code{MakeCitationList}.  Additionally, we use the \code{names<-} method to assign keys.  We may then refer to entries in our \code{BibEntry} object of packages using the package name/key because of the special features of the \code{\bt[\bt} operator for \code{BibEntry} objects, which we discuss in detail in a later section.
<<asBibEntry3, cache=FALSE, tidy = FALSE, warning=FALSE, message=FALSE>>=
pkg.bib <- RefManageR:::MakeCitationList(pkg.bib)
pkg.bib["boot"]
pkg.bib[key = "boot"]
@
Using \code{pkg.bib["boot"]} matches the entry with key exactly ``boot''.  Using \code{pkg.bib[key = "boot"]}, we match any entry whose key contains the string ``boot'', for reasons that will be made clear in Section~\ref{sec_manip}.
The BibEntry class also has methods \code{as.data.frame} and \code{unlist} to convert BibEntry objects to a data frame and unlist'ed vector, respectively.  The function \code{as.data.frame} will create  a \code{data.frame} from a \code{BibEntry} object with each row corresponding to a unique entry and one column for every field present in the \code{BibEntry} object, including a column called `bibtype' for the type of entry.  \code{NA} values indicate that the field is not present in that entry (row of the \code{data.frame}).  The row names will be the `key's of the entries.

\subsection{Setting Package Options}
We provide a convenience function \code{BibOptions} for changing packages options.  This function behaves similarly to the \code{options} function in \pkg{base}.  This allows the user to set default values for several arguments to the most commonly used functions, so the user does not have to specify them each call.  We leave the discussion of most of the options to later sections when introducing the functions the options affect.  The \code{bibentry} class checks every entry to ensure that it has the values for each fields required by \Bibtex{} for that entry type.  As mentioned, though entries have required fields, they are not really required as \Biblatex{} will work and generate a citation in any reasonable situation with missing fields.  Thus, one option we provide is to turn off the check for missing fields using the option \code{check.entries}.  The default value \code{"error"} throws an error when an attempt is made to use an entry with missing fields and will not create a new entry when an entry is specified with missing fields.  The value \code{"warn"} results in a warning be thrown when a entry with missing fields is encountered, but execution will not be stopped.  Lastly, the value \code{FALSE} turnings off checking of entries entirely.  In the following example we demonstrate the use of the \code{BibOptions} function and show what happens for the different settings of the \code{check.entries} option.
<<BibOpt, tidy = FALSE>>=
BibOptions("check.entries")
BibEntry(bibtype = "Online", key = "ctan", date = "2006", 
 title = "The Comprehensive TeX Archive Network", url = "http://www.ctan.org")
old.opt.val <- BibOptions(check.entries = FALSE)
c(old = old.opt.val[[1L]], new = BibOptions()$check.entries)
BibEntry(bibtype = "Online", key = "ctan", date = "2006", 
 title = "The Comprehensive TeX Archive Network", url = "http://www.ctan.org")
BibOptions(old.opt.val)  # restore the old value of the options
@
The default values of all options can be restored using \code{BibOptions(restore.defaults = TRUE)}.  A list of all options and their current values is obtained by calling the function with no arguments, i.e. \code{BibOptions()}.  Options may be specified in \code{name = value} pairs or as a \code{list}.
\section{Importing Citations From the Web}\label{sec_import}
\subsection{NCBI's Entrez}
The National Center for Biotechnology Information's Entrez Global Query Cross-Database Search provides access to a large number of databases related to health sciences. \ourpkg{} provides an interface to Entrez which allows for searching for references and parsing them to BibEntry objects.  Additionally, users may look up references given a set of PubMed ID's, search for ID's for references already stored in a BibEntry object, and search for related works to references already in \R{}.  The full documentation for Entrez is available at \citet{entrez}.

The first \ourpkg{} function we discuss is \code{ReadPubMed}, which uses the ESearch E-Utility.  Among other features, ESearch is used to search any of Entrez's 38 databases (not just PubMed) using a query string and returns a list of entries in the database that match the query by their IDs. These IDs are then used to retrieve bibliographic information using another call to Entrez which is parsed into a \code{BibEntry} object and returned by \code{ReadPubMed}.  The next example does a simple search for some of RJC's publications.
<<PubMed1, cache = TRUE>>=
rjc.pm <- ReadPubMed("raymond j. carroll", database = "PubMed")
rjc.pm[[1L]]
@
The \code{"..."} argument of \code{ReadPubMed} can be used to pass additional optional arguments to ESearch.  Among the most useful are \code{retmax} to specify the maximum number of entries to return, \code{retmax} to specify the index of the first result to return, and \code{field} to search only a particular field of the entries for a match.  For controlling the date of the matches there are options, \code{datetype} which gives the type of date to consider when searching by date; for example \code{datetype = "pdat"} specifies to search by publication date and \code{datetype = "mdat"} specifies to search by modification date.  The \code{mindate} and \code{maxdate} options specify the minimum and maximum dates that the search results should be restricted to.  Dates should be in the format "YYYY", "YYYY/MM", or "YYYY/MM/DD".  Our next query returns one entry published in 2009 in the Journal of Statistical Software
<<PubMed2, cache = TRUE>>=
ReadPubMed("journal of statistical software", field = "journal", retmax = 1, 
           mindate = 2009, maxdate = 2009)
@

The \code{GetPubMedRelated} function uses the ELink E-Utility to find related articles to a set of articles or IDs.  We specify either a character vector of IDs or a BibEntry object containing entries with `eprinttype' field equal to "pubmed" and pubmed ID's stored in the `eprint' field (the format expected by \Biblatex{} and also returned by the \code{ReadPubMed} function).  ELink can perform in two distinct ways given a set of IDs, either search for related articles for each ID in the set separately, or use the entire set at once to find articles that are related to every article specified by the set of IDs.  The latter type of behaviour is requested in \code{GetPubMedRelated} by specifying \code{batch.mode = TRUE} as an argument in the call.  In the below example we find related entries to the articles returned by the previous query for publications by RJC.
<<PubMed3, cache = TRUE, dependson="PubMed1">>=
GetPubMedRelated(rjc.pm, batch.mode = TRUE, max.results = 1)
@

Entrez returns a similarity score with each returned citation giving a measure of how similar the returned entry is to the specified IDs.  These scores can be returned in the outputted \code{BibEntry} object in a field called `score' by specifying \code{return.sim.scores = TRUE} in the call.  Additionally, the IDs in the call that were used to determine the relation can be included in the output in a field called `PMIDrelated' if the argument \code{return.related.ids} is \code{TRUE}.  In the next example we set \code{batch.mode = FALSE} and return one related article for each of two entries in \code{rjc.pm}.
<<PMopt, include = FALSE>>=
oldhook <- knit_hooks$get("output")
knit_hooks$set(output = function(x, options) {
    return(paste0('\\begin{lstlisting}[showstringspaces=false,style=output,columns=fullflexible,breaklines=true,inputencoding=utf8,extendedchars=\true,breakautoindent=false,breakindent=0pt,inputencoding=utf8]\n',
      x,
    '\\end{lstlisting}'))
})
@ 
<<PubMed4, cache = TRUE, dependson="PubMed1", tidy=FALSE>>=
BibOptions(check.entries = FALSE)
ids <- rjc.pm$eprint[3:4]
ids
related <- GetPubMedRelated(ids, batch.mode = FALSE, max.results = c(1, 1),
                      return.sim.scores = TRUE, return.related.ids = TRUE)
toBiblatex(related)
@
<<PMreset, include = FALSE>>=
knit_hooks$set(output = oldhook)
@

The \code{LookupPubMedID} function is provided by \ourpkg{} to use Entrez's Ecitmatch to search for PubMed IDs for entries in an existing \code{BibEntry} object.  In the following, we read in a \Bibtex{} file of references of RJC's from Google Scholar and search for PubMed ID's for some of the entries.  If the search is successful and an ID is found, the corresponding entry is updated so that the `eprinttype' field is assigned the value “pubmed” and the `eprint' field is assigned the ID.
<<PubMed5, cache = TRUE>>=
file.name <- system.file("Bib", "RJC.bib", package="RefManageR")
bib <- ReadBib(file.name)
bib <- LookupPubMedID(bib, 50)
bib[[50]]$eprint
@
If one wishes to use other NCBI E-Utilities and does not wish to work with \code{BibEntry} or \code{bibentry} objects, see the \pkg{rentrez} package \citep{rentrez}.
\subsection{Zotero}
\code{Zotero} is free, open source software for collecting and sharing bibliographic information.  \code{Zotero} can automatically retrieve bibliographic metadata that has been embedded in webpages using \code{ContextObjects in Spans} (\code{COinS}), and is thus a very convenient way to collect bibliographic information when browsing, for example, journal websites.  The \ourpkg{} package contains functions for querying existing \code{Zotero} libraries and converting the results to a BibEntry object and also for uploaded an existing BibEntry object to a Zotero library.  To use the Zotero API, a Zotero account, their userID and an API key for the library one wishes to access.  The userID and API key for personal libraries may be found by logging in and visiting the page \url{https://www.zotero.org/settings/keys}.  The following example, the following call to ReadZotero returns the first two entries in the library specified by the \code{``key''} that contain the word ``Bayesian'' in the title.
<<ReadZotero, tidy=FALSE, highlight=TRUE, echo=-1, cache=TRUE>>=
knit_theme$set('fine_blue')
ReadZotero(user = '1648676', .params = list(q = 'bayesian', 
                               key = '7lhgvcwVq60CDi7E68FyE3br', limit = 2))
@
\subsection{Google Scholar}
We provide a function for downloading citations from a public Google Scholar profile.  This function is partially based on the function \code{get_publications} in the \pkg{scholar} package \citep{scholar}, but provides additional functionality and processes the results into a \code{BibEntry} object.  The function requires the Google Scholar ID of the researcher of interest.  A user can obtain this ID by navigating to the researcher's Google Scholar profile and copying the value of the \code{user} parameter in the URL.  The profile must be public for the function to work.  The function assumes that each entry is either of type \code{'Article'} or type \code{'Book'}.  If any numbers are available with the entry relating to journal volume, number, or pages; then the entry will be classified as type \code{'Article'}.  Otherwise, the type will be \code{'Book'}.  The code that follows will return the second author's three most recent papers indexed by Google Scholar.
<<ReadGS1, tidy=FALSE, highlight=TRUE, cache=TRUE>>=
## RJC's Google Scholar profile is at: 
## http://scholar.google.com/citations?user=CJOHNoQAAAAJ
rjc.bib <- ReadGS(scholar.id = 'CJOHNoQAAAAJ', sort.by.date = TRUE, 
                  limit = 3)
rjc.bib
@

The function also stores the number of citations of each result.  Each \code{BibEntry} will store the number of citations in a field \code{'cites'}, which is ignored when generating a bibliography by \Biblatex{} or \Bibtex{} without additional effort to handle a custom entry field.  The following code will obtain the second author's three most cited works according to Google Scholar and prints the citation count and entry type for each entry.
<<ReadGS2, tidy=FALSE, highlight=TRUE, cache=TRUE>>=
## RJC's Google Scholar profile is at: 
## http://scholar.google.com/citations?user=CJOHNoQAAAAJ
rjc.bib <- ReadGS(scholar.id = 'CJOHNoQAAAAJ', sort.by.date = FALSE, 
                  limit = 3)
rjc.bib
cbind(rjc.bib$key, rjc.bib$cites, rjc.bib$bibtype)
@

A shortcoming of this approach, is that long author lists, long titles, or long journal/publisher info can all lead to incomplete information being returned for those fields for the offending entries.  In this case, the \code{ReadGS} function will either not include entry or provide a add the entry with a warning depending on the value of the \code{check.entries} argument.
<<ReadGS3, tidy=FALSE, highlight=TRUE, cache=TRUE>>=
## RJC's Google Scholar profile is at: 
## http://scholar.google.com/citations?user=CJOHNoQAAAAJ
rjc.bib <- ReadGS(scholar.id = 'CJOHNoQAAAAJ', sort.by.date = FALSE, 
                  limit = 10, check.entries = 'error')
rjc.bib2 <- ReadGS(scholar.id = 'CJOHNoQAAAAJ', sort.by.date = FALSE, 
                  limit = 10, check.entries = 'warn')
length(rjc.bib) == length(rjc.bib2)
## the offending entry.  RJC is missing because list of authors was too long
print(rjc.bib2[title='dietary measurement error'], 
      .opts = list(max.names = 99, bib.style = 'alphabetic'))
@
\subsection{CrossRef}
The function \code{ReadCrossRef} uses the CrossRef Metadata Search API to import references based on a search of CrossRef's nearly 60 million records.  Given a search and possibly a search year, the function receives \Bibtex{} entries as JSON objects using the \pkg{RJSONIO} package \citep{RJSONIO}, which are saved to a temporary file and then read back into \R{} using the \code{ReadBib} function to be returned as a \code{BibEntry} object.
<<ReadCR1, tidy=FALSE, highlight=TRUE, cache=TRUE>>=
ReadCrossRef(query = 'rj carroll measurement error', limit = 3, 
             sort = "relevance", min.relevance = 80, verbose = FALSE)
@

Although false negatives are rare, the CrossRef Metadata Search can be prone to false positives.  For this reason, it is important to specify the \code{min.relevance} argument.  Each reference returned by CrossRef comes with a relevancy score which is CrossRef's determination of how likely the reference is to be a match for the supplied query.  The maximum possible value is 100, so for the most strict possible matching, we can specify \code{min.relevance = 100}.  If the argument \code{verbose} is \code{TRUE}, then a message is printed with the relevancy score and full citation for each reference with a relevancy score greater than \code{min.reference} in addition to returning the references in a \code{BibEntry} object.
% # <<ReadCR2, tidy=TRUE, highlight=TRUE>>=
% # bib <- ReadCrossRef(query = 'rj carroll data', limit = 3, sort = "relevance", 
% #              min.relevance = 50, verbose = TRUE)
% # @
\section{Sorting, Printing, Opening, and Outputting to File}\label{sec_print}
\subsection{Printing}
A number of \Biblatex{} bibliography styles are available in \ourpkg{} for formatting and displaying citations.  The styles currently implemented are ``numeric'' (the default), ``authortitle'', ``authoryear'', ``alphabetic'', and ``draft''.  The ``authoryear'' style always begins with the family name of the first author and follows the list of authors with the year of publication in parentheses.  The other four styles all use the same format, differing only in the label they print before each entry.  Style ``numeric'' prints the numeric index of each entry in the bibliography, style ``authortitle'' uses no label, style ``alphabetic'' creates a label using the family names of the authors and the last two digits of the publication year, and style ``draft'' uses the entry key as the label.

Entries may be printed as plain text, HTML, \Bibtex{} format, \Biblatex{} format, as \R{} code, Markdown, or as a mixture of \Bibtex{} and plain text commonly used for citations.  For an example of the ``authoryear'' style
<<Print1, tidy=TRUE, highlight=TRUE, cache=TRUE>>=
file.name <- system.file("Bib", "biblatexExamples.bib", package="RefManageR")
bib <- ReadBib(file.name, check = FALSE)
print(bib[author = "Nietzsche"], .opts = list(bib.style = "authoryear"))
@

The package has a number of options similar to those available in \Biblatex{}, including \code{dashed} to control the use of dashes for duplicate authors as in the above example, \code{max.names} to control the number of names in name list fields that will be printed before they are truncated with ``et al.'', and \code{first.inits} to control the whether given names are truncated to first initials or full names are used.  These options can be set using the \code{BibOptions} function or passed as options to the \code{.opts} argument of the \code{print} method. The \code{print} method also contains an option for supressing the printing of certain fields.
<<Print2, tidy=FALSE, highlight=TRUE, cache=TRUE, dependson="Print1">>=
old.opts <- BibOptions(bib.style = "alphabetic", max.names = 2, 
                       first.inits = FALSE)
bib[bibtype = "report"]
BibOptions(old.opts)  # reset to original values
print(bib[[19]], .opts = list(style = "html", no.print.fields = "url", 
      bib.style = "authortitle"))
@

The user can create a custom \Biblatex{} or \Bibtex{} bibliography style using the \code{bibstyle} fuction in the \code{tools} package.  To do this involves creating an environment containing functions for formatting entries of each type with signatures such as `formatArticle(paper)` and `formatBook(paper)`.

A downside of \Biblatex{} is that the majority of academic journals do not support its use, having long ago written a custom \code{bst} file for generating citations which can only be used by \Bibtex{}.  For this reason \ourpkg{} provides the function \code{toBibtex} for conversion of entries written in \Biblatex{} to \Bibtex{}.  Entries of a type that are not supported by \Bibtex{} will be converted to a type that is, e.g., entries of type ``report'' are converted to type ``techreport''.  Other conversions include replacing the date field with a properly formatted year field (if year is not already present) and converting the ``journaltitle'' field to ``journal''.  Since the cross-referencing system in \Bibtex{} is more limited than the one supported by \Biblatex{}, an attempt is made to ensure the cross-referencing will still work as expected in \Bibtex{}.

The function \code{WriteBib}, based on the function \code{write.bib} in the package \pkg{bibtex} \citep{Rbibtex}, is provided for writing a \code{BibEntry} object to a \code{bib} file in \Biblatex{} or \Bibtex{} format.
\subsection{Sorting}
Nine different methods are available for sorting citations stored in a BibEntry object, corresponding to the ones predefined in \Biblatex{}.  Depending on the \code{bib.style} option, the default sorting method is \code{``nty''} to sort by name (`n'), then title (`t'), then year/date (`y').  Other possibilities are ``debug'' to sort by keys, ``none'' for no sorting, ``nyt'', ``nyvt'', ``anyt'', ``anyvt'', ``ynt'', and ``ydnt''; where the `a' stands for sorting by alphabetic label, `v' stands for sorting by volume, and `yd' for sorting by year/date in descending order.

All sorting methods first consider the field `presort', if available. Entries with no presort field are assigned presort value ``mm''. Next the `sortkey' field is used.  When sorting by name, the sortname field is used first. If it is not present, the author field is used, if that is not present editor is used, and if that is not present translator is used.  When sorting by title, first the field sorttitle is considered. Similarly, when sorting by year, the field sortyear is first considered.  When sorting by volume, if the field is present it is padded to four digits with leading zeros; otherwise, the string ``0000'' is used.  When sorting by alphabetic label, first the shorthand field is considered, then label, then shortauthor, shorteditor, author, editor, and translator. Refer to \citet[Sections~3.1.2.1 and 3.5 and Appendix~C.2][]{biblatex} for further details.
\section{Searching and Manipulating BibEntry Objects}\label{sec_manip}
\subsection{Extraction Operators - Searching and Indexing}\label{searchsec}
The extraction operator \code{'['}, has been defined for BibEntry objects to allow for easily searching a database of references saved in a BibEntry object.  A different interface providing the same functionality is the function \code{SearchBib}.  Search options can be changed by set variables in the BibOptions object or alternatively specified directly as arguments to the function \code{SearchBib}.  BibLaTeX date fields (\code{date,year,origdate,urldate,eventdate}) and name lists (author, editor, editora, editorb, editorc, translator, commentator, annotator, introduction, foreword, afterword, bookauthor, and holder) are handled specially as outlined below.  Other fields can be searched using either exact string matching or regular expressions, with or without ignoring case.

Indices and search terms can be specified in a number of ways.  Similar to the default extraction operator for list objects, a vector of numeric indices or logical values can be given.  Additionally, a character vector of key values can be specified.  To search by field, a query can be specified with comma delimited \code{field=search.term} pairs, with \code{search.term} potentially being a vector with length greater than one to match multiple terms for \code{field} (think ``OR'').  Each \code{field = search.term} pair will have to match to declare a match for that entry (think ``AND'').  Multiple queries (``OR'') can be handled (involving different fields) by enclosing each separate query preferably in a \code{list} or alternatively, \code{c}.  For example, $\text{list}(field_{11} = \mathbf{search.term_{11}},field_{12}=\mathbf{search.term_{12}}),\text{list}(field_{21}=\mathbf{search.term_{21}})$.  If \code{c} is used instead of \code{list}, then the search terms \emph{must} have length one.  Examples will be provided shortly after discussing the special handling of date and name fields.  

Valid values for date fields in \Biblatex{} have the form \code{yyyy}, \code{yyyy-mm}, \code{yyyy-mm-dd}, and can be intervals of the form \code{yyyy/yyyy}, \code{yyyy-mm/yyyy-mm}, \code{yyyy-mm-dd/yyyy-mm-dd}.  The second date can be omitted in the interval to allow for open-ended end dates, e.g. \code{yyyy/}.  When searching using a date field, the search string should have one of these formats.  Additionally, the search string can be an interval with no start date, e.g. \code{date = ``/1980-06''} to return all entries published before June, 1980.  The \pkg{lubridate} package \citep{lubridate} is used to compare date fields, dates specified as intervals are converted to class \code{Interval} and non-interval dates are converted to class \code{POSIXct}.  The format \code{yyyy-mm} \emph{is} currently supported despite not being supported in base \R{} or \pkg{lubridate}.  For compatibility with \Bibtex{}, \Biblatex{} and \ourpkg{} support the fields \code{year} and \code{month}, which are used if the \code{date} field is missing. Whether to ignore month and day values, if available, and only compare based on the year portion of the date field, is controlled by the option \code{match.date}, which supports two values ``exact'' or ``year.only''.

When searching name list fields, the search term is expected to have the same format as used in a \code{.bib} file, e.g., \code{``Doe, Jr., John and Jane \{Doe Smith\}''}.  Names can be matched based on family names only, by family name and given name initials, or by full name, depending on the value of the option \code{match.author}.  

Entries containing valid \code{crossref} and \code{xdata} fields are expanded prior to searching, so that when a match is found for a field and value that a child entry inherits from its parent, the result is both the parent and child being returned.  If a match is found in a child entry and not in the parent, only the child entry is returned, but the returned entry will contain any fields it inherits from its parent.  Any xdata entries that the child references will also be returned.  Examples follow.

<<Search1, tidy=TRUE, highlight=TRUE, cache=TRUE>>=
file.name <- system.file("Bib", "biblatexExamples.bib", package="RefManageR")
bib <- ReadBib(file.name, check = FALSE)
# by default match.author = 'family.only' and ignore.case = TRUE
# inbook entry inheriting editor field from parent
bib[editor = "westfahl"]

# no match with parent entry, the returned child has inherited fields
bib[author = "westfahl"]
@

<<Search2, dependson="Search1", tidy=TRUE, highlight=TRUE>>=
# Entries published in Zürich (in bib file Z{\"u}ich)
# OR entries written by Aristotle and published before 1930
bib[list(location="Zürich"),list(author = "Aristotle", year = '/1930')]

# no match with parent entry, the returned child has inherited fields
bib[author = "westfahl"]
@
The list extraction operator, \code{\bt[[\bt}, is used for extacting bibentry objects by position (an integer) or the entry key (a string).  Unlike the default operator, a vector of indices may be given to extract more than one entry at a time.

As with \code{bibentry} objects, the \code{\bt$\bt} operator for BibEntry objects is used to return a list containing the value of a particular field for all entries, with a value of \code{NULL} returned for entries that to no use the specified field.  A list of all entry types or keys for the \code{BibEntry} object, \code{bib}, can be obtained using \code{bib$bibtype} and \code{bib$key}, respectively.
\subsection{Assignment Operators} 
List assignment, \code{\bt[[<-\bt} is used for replacing one entry in a BibEntry object with another.  The below example uses a bibliography of just under 500 works of Raymond J.\ Carroll indexed on Google Scholar.  It contains a number of errors, some of which we correct below to help demonstrate the use of the package.
<<RJC1, tidy=TRUE, eval= -3, highlight=TRUE, cache=TRUE>>=
file.name <- system.file("Bib", "RJC.bib", package="RefManageR")
bib <- ReadBib(file.name)
length(bib)
length(bib) == length(bib[author="Carroll"])
# which entries are missing RJC?
ind <- SearchBib(bib, author = "!Carroll", .opts = list(return.ind = TRUE))
bib[ind]$author  
@
We can see that one paper is incorrectly attributed to RJC and the other four have spelling errors.  We thus drop that entry and correct the spelling on the other four entries.
<<RJC2, tidy=FALSE, dependson="RJC1", highlight=TRUE, cache=TRUE>>=
bib <- bib[-ind[4L]]
bib[author="!Carroll"]$author <- c("Martinez, J. G. and Carroll, R. J.",
 "Carroll, R. J. and Ruppert, D. and Stefanski, L. A. and Crainiceanu, C. M.",
 "Carroll, R. J.", "Carroll, R. J.")
length(bib) == length(bib[author="Carroll"])
@
We can update different fields of multiple entries using the operator \code{\bt[<-\bt} as follows.
<<RJC3, tidy=FALSE, dependson="RJC2", highlight=TRUE, cache=TRUE>>=
BibOptions(sorting = "none", bib.style = "alphabetic")
bib[seq_len(3)]
bib[seq_len(3)] <- list(c(date="2013-12"), ## add month to Serban et al.
        c(url="http://bsb.eurasipjournals.com/content/2013/1/13", 
          urldate = "2014-02-02"), ## add URL and urldate to Jennings et al.
        c(doi="10.1093/bioinformatics/btt608", 
          journal = "Bioinformatics")) ## add DOI and correct journal
bib[seq_len(3)]
@
Alternatively, a BibEntry object may be used as the replacement value.  A field may be removed by specifying its value be
set to the empty string \code{''}.
<<RJC4, tidy=FALSE, dependson="RJC3", highlight=TRUE, cache=TRUE, echo=-1>>=
BibOptions(sorting = "none", bib.style = "alphabetic")
bib2 <- bib[seq_len(3)]
bib2[2:3] <- bib[5:6]
# Note the Sarkar et al. entry is arXiv preprint with incorrect journal field
bib2
# Change type, remove journal, correct arXiv information
bib2[3] <- c(journal='', eprinttype = "arxiv", eprint = "1308.5427", 
           eprintclass = "math.ST", pubstate = "submitted", bibtype = "Misc")
bib2[3]
@
\subsection{Merging}
The combine function, \code{c}, is available for concatenating multiple \code{BibEntry} objects, and has been inherited from the \code{bibentry} class.  Of course, this does not perform any checking for duplicate entries.  For this, there is the \code{base} package generics \code{anyDuplicated}, \code{duplicated}, and \code{unique}, which check vectors for duplicate elements.  However if \code{BibEntry} objects have been complied from a number of different sources, these functions may be too strict, declaring entries distinct even if only one field has a small difference between the two entries.  For this reason, we provide an additional operator \code{'+'} and a wrapper function \code{merge}, that compare entries only based on the fields specified by the user.  Given \code{BibEntry} objects \code{bib1} and \code{bib2}, \code{bib1 + bib2} will return \code{bib1} appended with all entries of bib2 that have been determined not be duplicates of entries already in \code{bib1} by comparing all fields in \code{.BibOptions$merge.fields.to.check}, which can include \code{bibtype} and \code{key}.  The function also checks if there are any duplicate keys in the result, and will force them to be unique if duplicates are detected using \code{make.unique}. 

\section[Using RefManageR for Citations]{Using \ourpkg{} in Dynamic Documents}\label{sec_cite}

\section{Conclusion}\label{sec_conc}
The \ourpkg{} package provides \R{} with considerable extra functionality for working with bibliography data.  Working with \Bibtex{} bibliography files and managing references can be frustrating, due to several shortcomings of \Bibtex{} including its lack of out-of-the-box support for certain fields that leads to entries 
\bibliography{biblatex}
\end{document}